import os
import logging
import random
import pandas as pd
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')  # –í–∞—à ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
EXCEL_FILE = "users_data.xlsx"
BACKUP_FOLDER = "backups"
BACKUP_DAYS = 30  # –•—Ä–∞–Ω–∏—Ç—å –±—ç–∫–∞–ø—ã N –¥–Ω–µ–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
os.makedirs(BACKUP_FOLDER, exist_ok=True)

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ---
def init_excel():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª Excel –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    if not os.path.exists(EXCEL_FILE):
        df = pd.DataFrame(columns=[
            'user_id', 'username', 'first_name', 'last_name',
            'name', 'age', 'city', 'created_at'
        ])
        df.to_excel(EXCEL_FILE, index=False)

async def notify_admin(user_data: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        text = (
            "üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
            f"üë§ –ò–º—è: {user_data['name']}\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {user_data['city']}\n"
            f"üî¢ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
            f"üÜî ID: {user_data['user_id']}"
        )
        await bot.send_message(ADMIN_CHAT_ID, text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def clean_backups():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤"""
    try:
        now = datetime.now()
        for filename in os.listdir(BACKUP_FOLDER):
            filepath = os.path.join(BACKUP_FOLDER, filename)
            if os.path.isfile(filepath):
                file_date_str = filename.split('_')[-1].replace('.xlsx', '')
                file_date = datetime.strptime(file_date_str, "%Y-%m-%d")
                if (now - file_date).days > BACKUP_DAYS:
                    os.remove(filepath)
                    logging.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {filename}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—ç–∫–∞–ø–æ–≤: {e}")

async def send_backup():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø —Å –æ—á–∏—Å—Ç–∫–æ–π"""
    try:
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        today = datetime.now().strftime("%Y-%m-%d")
        backup_file = f"{BACKUP_FOLDER}/users_backup_{today}.xlsx"
        df = pd.read_excel(EXCEL_FILE)
        df.to_excel(backup_file, index=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        await bot.send_document(
            chat_id=ADMIN_CHAT_ID,
            document=InputFile(backup_file),
            caption=f"üìä –ë—ç–∫–∞–ø –∑–∞ {today} (–≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(df)})"
        )
        
        # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
        clean_backups()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: {e}")

# --- –û–°–ù–û–í–ù–û–ô –ö–û–î –ë–û–¢–ê ---
init_excel()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler.add_job(send_backup, 'cron', hour=0, minute=5)  # –í 00:05
scheduler.start()

# ... (–≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)

@dp.message_handler(lambda message: message.text == "–ù–∞—á–∞—Ç—å –ø—É—Ç—å üîÆ")
async def start_questionnaire(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {"step": "name"}
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardMarkup(remove_keyboard=True))

@dp.message_handler(state="age")
async def process_age(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        age = int(message.text)
        if 12 <= age <= 100:
            async with state.proxy() as data:
                data['age'] = age
                user_data = {
                    'user_id': message.from_user.id,
                    'username': message.from_user.username,
                    'first_name': message.from_user.first_name,
                    'last_name': message.from_user.last_name,
                    'name': data['name'],
                    'city': data['city'],
                    'age': age
                }
                
                if save_to_excel(user_data):
                    await notify_admin(user_data)  # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                    
                    await message.answer(
                        random.choice(final_messages),
                        reply_markup=repeat_keyboard
                    )
                else:
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
            await state.finish()
            return
    
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (12-100):")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
