import os
import logging
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–≤–æ–∑—å–º–∏—Ç–µ –∏–∑ @BotFather)
API_TOKEN = os.getenv('TELEGRAM_TOKEN') or "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"  # ‚Üê –ó–∞–º–µ–Ω–∏—Ç–µ –∑–¥–µ—Å—å!

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –í–∞—à–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
final_messages = [
    "‚ú® –¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –æ—Ç–∫—Ä—ã–ª–∞ –¥–æ—Å—Ç—É–ø –∫ –¥–µ–Ω–µ–∂–Ω–æ–º—É —Ä–µ—Å—É—Ä—Å—É...",
    "üéâ –í—Å—ë –≥–æ—Ç–æ–≤–æ!...",
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –±—ã–ª–∏)
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ù–∞—á–∞—Ç—å –ø—É—Ç—å üîÆ"))

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ '–ú–∞–≥–∏—è –∏ –î–µ–Ω—å–≥–∏'! ‚ú®\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Üì",
        reply_markup=start_keyboard
    )

@dp.message_handler(lambda message: message.text == "–ù–∞—á–∞—Ç—å –ø—É—Ç—å üîÆ")
async def ask_name(message: types.Message):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

@dp.message_handler(content_types=['text'])
async def handle_answers(message: types.Message):
    if "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?" in message.text:
        await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    elif "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?" in message.text:
        await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    elif "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?" in message.text:
        msg = random.choice(final_messages)
        await message.answer(msg, reply_markup=start_keyboard)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
