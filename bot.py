import os
import logging
import random
from datetime import datetime
import pandas as pd
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv('TELEGRAM_TOKEN') or "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"  # ‚Üê –ó–∞–º–µ–Ω–∏—Ç–µ!
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –§–∞–π–ª –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
EXCEL_FILE = "users_data.xlsx"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
def init_excel():
    if not os.path.exists(EXCEL_FILE):
        df = pd.DataFrame(columns=[
            'user_id', 'username', 'first_name', 'last_name', 
            'name', 'age', 'city', 'created_at'
        ])
        df.to_excel(EXCEL_FILE, index=False)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_to_excel(user_data: dict):
    try:
        df = pd.read_excel(EXCEL_FILE)
        new_row = {
            'user_id': user_data['user_id'],
            'username': user_data['username'],
            'first_name': user_data['first_name'],
            'last_name': user_data['last_name'],
            'name': user_data['name'],
            'age': user_data['age'],
            'city': user_data['city'],
            'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
        df.to_excel(EXCEL_FILE, index=False)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_excel()

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ (–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
user_data = {}

final_messages = [
    "‚ú® –¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –æ—Ç–∫—Ä—ã–ª–∞ –¥–æ—Å—Ç—É–ø –∫ –¥–µ–Ω–µ–∂–Ω–æ–º—É —Ä–µ—Å—É—Ä—Å—É...",
    "üéâ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞: https://clicktvf.com/ELAb"
]

start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ù–∞—á–∞—Ç—å –ø—É—Ç—å üîÆ"))
repeat_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–•–æ—á–µ—à—å –µ—â–µ?üîÆ"))

@dp.message_handler(commands=['start', 'help'])
@dp.message_handler(content_types=['text'])
async def auto_start(message: types.Message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        user_data[user_id] = {
            "step": "name",
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name
        }
        await message.answer("üîÆ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardMarkup(remove_keyboard=True))
    else:
        await continue_questionnaire(message)

async def continue_questionnaire(message: types.Message):
    user_id = message.from_user.id
    data = user_data.get(user_id, {})
    
    if data.get("step") == "name":
        user_data[user_id]["name"] = message.text
        user_data[user_id]["step"] = "city"
        await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
        
    elif data.get("step") == "city":
        user_data[user_id]["city"] = message.text
        user_data[user_id]["step"] = "age"
        await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        
    elif data.get("step") == "age":
        if message.text.isdigit():
            age = int(message.text)
            if 12 <= age <= 100:
                user_data[user_id]["age"] = age
                user_data[user_id]["user_id"] = user_id
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
                save_to_excel(user_data[user_id])
                
                await message.answer(
                    random.choice(final_messages),
                    reply_markup=repeat_keyboard
                )
                user_data[user_id] = {"step": "name"}  # –°–±—Ä–æ—Å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 12 –¥–æ 100 –ª–µ—Ç!")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message_handler(lambda message: message.text == "–•–æ—á–µ—à—å –µ—â–µ?üîÆ")
async def repeat_questionnaire(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {
        "step": "name",
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name
    }
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardMarkup(remove_keyboard=True))

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
