import logging
import random
import csv
from datetime import datetime
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = '7436585466:AAGTOo1hR5q4VbmeJWXtKwQOx_QMYgDHaRg'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

users = {}

final_messages = [
    "‚ú® –¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –æ—Ç–∫—Ä—ã–ª–∞ –¥–æ—Å—Ç—É–ø –∫ –¥–µ–Ω–µ–∂–Ω–æ–º—É —Ä–µ—Å—É—Ä—Å—É.\n\nüîó –ñ–º–∏ —Å—é–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: https://clicktvf.com/ELAb\n\n–¢—ã —É–¥–∏–≤–∏—à—å—Å—è, –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –≤—Å—ë –∏–∑–º–µ–Ω–∏—Ç—Å—è!",
    "üéâ –í—Å—ë –≥–æ—Ç–æ–≤–æ!\n\nüîÆ –ü–æ —Ç–≤–æ–∏–º –¥–∞–Ω–Ω—ã–º –ø–æ–¥–æ–±—Ä–∞–Ω –¥–µ–Ω–µ–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.\n\nüîó –ñ–º–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: https://clicktvf.com/ELAb\n\n–ü–æ—Ç–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —É–∂–µ —Ä—è–¥–æ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π –Ω—É–∂–Ω—É—é –¥–≤–µ—Ä—å üí∏‚ú®",
    "üåü –ì–æ—Ç–æ–≤–æ. –í—Å—ë —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ.\n\n–ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π –¥–µ–Ω–µ–∂–Ω—ã–π –∫–∞–Ω–∞–ª: https://clicktvf.com/ELAb\n\n–≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
    "üîì –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å!\n\n–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–µ–Ω–µ–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫. –ñ–º–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: https://clicktvf.com/ELAb\n\n–ù–µ —É–ø—É—Å—Ç–∏ –º–æ–º–µ–Ω—Ç. –û–Ω —É–Ω–∏–∫–∞–ª–µ–Ω.",
    "üé≤ –°—É–¥—å–±–∞ –¥–∞–ª–∞ —Ç–µ–±–µ —à–∞–Ω—Å.\n\n–ñ–º–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–æ–∫: https://clicktvf.com/ELAb\n\n–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ."
]

start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
start_keyboard.add(KeyboardButton("–ù–∞—á–∞—Ç—å –ø—É—Ç—å üîÆ"))

def save_user_data(user_id, name, city, age):
    with open("leads.csv", mode="a", newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow([datetime.now(), user_id, name, city, age])

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ '–ú–∞–≥–∏—è –∏ –î–µ–Ω—å–≥–∏'! ‚ú®\n\n–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ä–∏—Ç—É–∞–ª –ø–æ–¥–±–æ—Ä–∞ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ. –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?", reply_markup=start_keyboard)

@dp.message_handler(lambda message: message.text == "–ù–∞—á–∞—Ç—å –ø—É—Ç—å üîÆ")
async def ask_name(message: types.Message):
    users[message.from_user.id] = {}
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

@dp.message_handler(lambda message: message.from_user.id in users and "name" not in users[message.from_user.id])
async def ask_city(message: types.Message):
    users[message.from_user.id]["name"] = message.text.strip()
    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")

@dp.message_handler(lambda message: message.from_user.id in users and "city" not in users[message.from_user.id])
async def ask_age(message: types.Message):
    users[message.from_user.id]["city"] = message.text.strip()
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

@dp.message_handler(lambda message: message.from_user.id in users and "age" not in users[message.from_user.id])
async def show_final(message: types.Message):
    users[message.from_user.id]["age"] = message.text.strip()
    data = users[message.from_user.id]
    save_user_data(message.from_user.id, data['name'], data['city'], data['age'])

    msg = random.choice(final_messages)
    await message.answer(msg, reply_markup=start_keyboard)

@dp.message_handler()
async def auto_start(message: types.Message):
    if message.text not in ["–ù–∞—á–∞—Ç—å –ø—É—Ç—å üîÆ"]:
        await send_welcome(message)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
